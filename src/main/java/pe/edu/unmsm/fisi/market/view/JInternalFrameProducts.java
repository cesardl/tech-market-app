/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JInternalFrameProducts.java
 *
 * Created on 24/06/2009, 10:09:09 PM
 */
package pe.edu.unmsm.fisi.market.view;

import java.util.Collection;
import java.util.Collections;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import pe.edu.unmsm.fisi.market.business.impl.ProductBusiness;
import pe.edu.unmsm.fisi.market.model.Product;
import pe.edu.unmsm.fisi.market.util.AppUtils;

/**
 *
 * @author soporte
 */
public class JInternalFrameProducts extends javax.swing.JInternalFrame {

    private static final long serialVersionUID = -242730727037805381L;

    private static final Logger LOG = LoggerFactory.getLogger(JInternalFrameProducts.class);

    private final ProductBusiness productBusiness;

    private SearchType searchType;

    private enum SearchType {
        BY_CODE, BY_NAME
    }

    /**
     * Creates new form JInternalFrameProducts
     */
    public JInternalFrameProducts() {
        productBusiness = ProductBusiness.getInstance();
        searchType = SearchType.BY_NAME;
        initComponents();
    }

    private void refreshDataTable(Collection<Product> products) {
        javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) tableProducts.getModel();

        int rowCount = dtm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }

        products.forEach(p -> {
            Object[] rowData = {
                p.getProductId(), p.getDescription(), p.getPurchaseCost(), p.getQuantityOnHand(), p.isAvailable(), p.getManufacturer().getName()
            };
            dtm.addRow(rowData);
        });
        labelTotalRows.setText(String.valueOf(products.size()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.ButtonGroup buttonGroup = new javax.swing.ButtonGroup();
        javax.swing.JPopupMenu popupMenu = new javax.swing.JPopupMenu();
        menuItemShow = new javax.swing.JMenuItem();
        menuItemDelete = new javax.swing.JMenuItem();
        javax.swing.JPanel panelSearch = new javax.swing.JPanel();
        javax.swing.JRadioButton radioButtonByCode = new javax.swing.JRadioButton();
        javax.swing.JRadioButton radioButtonByName = new javax.swing.JRadioButton();
        textFieldSearch = new javax.swing.JTextField();
        buttonSearch = new javax.swing.JButton();
        javax.swing.JPanel panelProduct = new javax.swing.JPanel();
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane();
        tableProducts = new javax.swing.JTable();
        buttonAdd = new javax.swing.JButton();
        javax.swing.JLabel labelTotal = new javax.swing.JLabel();
        labelTotalRows = new javax.swing.JLabel();

        menuItemShow.setText("Show details");
        menuItemShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        popupMenu.add(menuItemShow);

        menuItemDelete.setText("Delete");
        menuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        popupMenu.add(menuItemDelete);

        setClosable(true);
        setTitle("Busqueda de Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/img/apache_derby.png"))); // NOI18N

        panelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar"));

        buttonGroup.add(radioButtonByCode);
        radioButtonByCode.setText("Codigo");
        radioButtonByCode.setFocusable(false);
        radioButtonByCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioButtonByCodeItemStateChanged(evt);
            }
        });

        buttonGroup.add(radioButtonByName);
        radioButtonByName.setSelected(true);
        radioButtonByName.setText("Nombre");
        radioButtonByName.setFocusable(false);
        radioButtonByName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioButtonByNameItemStateChanged(evt);
            }
        });

        buttonSearch.setText("Buscar");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
        panelSearch.setLayout(panelSearchLayout);
        panelSearchLayout.setHorizontalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioButtonByCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonByName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSearch)
                .addContainerGap())
        );
        panelSearchLayout.setVerticalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButtonByCode)
                    .addComponent(radioButtonByName)
                    .addComponent(textFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSearch))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        textFieldSearch.requestFocus();

        panelProduct.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos"));

        tableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Precio Unit", "Cantidad", "Disponible"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProducts.setComponentPopupMenu(popupMenu);
        tableProducts.getTableHeader().setReorderingAllowed(false);
        tableProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableProductsMousePressed(evt);
            }
        });
        scrollPane.setViewportView(tableProducts);

        javax.swing.GroupLayout panelProductLayout = new javax.swing.GroupLayout(panelProduct);
        panelProduct.setLayout(panelProductLayout);
        panelProductLayout.setHorizontalGroup(
            panelProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 792, Short.MAX_VALUE)
            .addGroup(panelProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelProductLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelProductLayout.setVerticalGroup(
            panelProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
            .addGroup(panelProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelProductLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        buttonAdd.setText("Agregar Producto");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productActionPerformed(evt);
            }
        });

        labelTotal.setText("Total:");

        labelTotalRows.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotalRows.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTotalRows)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTotalRows, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonAdd)
                    .addComponent(labelTotal))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productActionPerformed
        LOG.trace(evt.paramString());

        if (evt.getSource().equals(buttonSearch)) {
            searchProduct();
        } else if (evt.getSource().equals(buttonAdd)) {
            addProduct();
        }
    }//GEN-LAST:event_productActionPerformed

    private void searchProduct() {
        LOG.debug("Searching product");
        String str = textFieldSearch.getText().trim();
        Collection<Product> products;

        switch (searchType) {
            case BY_CODE:
                int val = AppUtils.toInteger(str);
                if (val == AppUtils.ERROR_NUMBER) {
                    LOG.warn("Ingrese entero si la busquda es por codigo");

                    javax.swing.JOptionPane.showMessageDialog(this,
                            "Ingrese entero si la busquda es por codigo",
                            getTitle(), javax.swing.JOptionPane.ERROR_MESSAGE);

                    AppUtils.markTextField(textFieldSearch);
                    return;
                } else {
                    LOG.info("Busqueda {}: '{}'", searchType, val);
                    Product product = productBusiness.buscarCodigo(val);

                    products = product == null
                            ? Collections.emptyList()
                            : Collections.singletonList(product);
                }
                break;

            case BY_NAME:
                LOG.info("Busqueda {}: '{}'", searchType, str);
                products = productBusiness.buscarNombre(str);
                break;

            default:
                throw new IllegalArgumentException("No hay operacion definida para el tipo: " + searchType);
        }

        LOG.info("Mostrando resultado");

        if (products.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "No se encontraron productos",
                    getTitle(), javax.swing.JOptionPane.WARNING_MESSAGE);

            AppUtils.markTextField(textFieldSearch);
        } else {
            refreshDataTable(products);
        }
        AppUtils.markTextField(textFieldSearch);
    }

    private void addProduct() {
        LOG.debug("Adding product");
        JDialogProductForm productForm = new JDialogProductForm(
                javax.swing.JOptionPane.getFrameForComponent(this), new Product());
        productForm.setVisible(true);

        if (productForm.isActionPerformed()) {
            Collection<Product> products = productBusiness.buscarNombre(textFieldSearch.getText());
            LOG.info("Product has been saved, showing data");
            refreshDataTable(products);
        }
    }

    private void radioButtonByNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioButtonByNameItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            searchType = SearchType.BY_NAME;
            LOG.trace("Asignando tipo de busqueda por nombre");
            textFieldSearch.requestFocus();
        }
    }//GEN-LAST:event_radioButtonByNameItemStateChanged

    private void radioButtonByCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioButtonByCodeItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            searchType = SearchType.BY_CODE;
            LOG.trace("Asignando tipo de busqueda por codigo");
            textFieldSearch.requestFocus();
        }
    }//GEN-LAST:event_radioButtonByCodeItemStateChanged

    private void tableProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductsMouseClicked
        LOG.trace(evt.paramString());

        if (evt.getClickCount() == 2) {
            javax.swing.JTable target = (javax.swing.JTable) evt.getSource();
            Integer productId = getProductIdFromJTable(target);

            showProduct(productId);
        }
    }//GEN-LAST:event_tableProductsMouseClicked

    private void menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemActionPerformed
        LOG.trace(evt.paramString());

        Integer productId = getProductIdFromJTable(tableProducts);

        if (evt.getSource().equals(menuItemShow)) {
            LOG.info("Showing product detail");
            showProduct(productId);
        } else if (evt.getSource().equals(menuItemDelete)) {
            LOG.info("Deleting product");
            deleteProductAction(productId);
        }
    }//GEN-LAST:event_menuItemActionPerformed

    private Integer getProductIdFromJTable(javax.swing.JTable target) {
        int row = target.getSelectedRow();

        javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) target.getModel();

        Integer productId = (Integer) dtm.getValueAt(row, 0);
        LOG.debug("Getting product identifier {}", productId);
        return productId;
    }

    private void tableProductsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductsMousePressed
        // selects the row at which point the mouse is clicked
        int currentRow = tableProducts.rowAtPoint(evt.getPoint());
        tableProducts.setRowSelectionInterval(currentRow, currentRow);
    }//GEN-LAST:event_tableProductsMousePressed

    private void showProduct(int productId) {
        Product product = productBusiness.buscarCodigo(productId);

        JDialogProductForm productForm = new JDialogProductForm(
                javax.swing.JOptionPane.getFrameForComponent(this), product);
        productForm.setVisible(true);

        if (productForm.isActionPerformed()) {
            Collection<Product> products = productBusiness.buscarNombre(textFieldSearch.getText());
            LOG.info("Product has been updated, showing data");
            refreshDataTable(products);
        } else {
            LOG.debug("No action has performed");
        }
    }

    private void deleteProductAction(int productId) {
        int optionChosen = javax.swing.JOptionPane.showConfirmDialog(this,
                "Seguro que desea eliminar el producto?", getTitle(),
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE);

        if (javax.swing.JOptionPane.YES_OPTION == optionChosen) {
            if (productBusiness.delete(productId)) {
                Collection<Product> products = productBusiness.buscarNombre(textFieldSearch.getText());
                LOG.info("Product has been updated, showing data");
                refreshDataTable(products);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "No se pudo borrar el producto.", getTitle(),
                        javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JLabel labelTotalRows;
    private javax.swing.JMenuItem menuItemDelete;
    private javax.swing.JMenuItem menuItemShow;
    private javax.swing.JTable tableProducts;
    private javax.swing.JTextField textFieldSearch;
    // End of variables declaration//GEN-END:variables
}
